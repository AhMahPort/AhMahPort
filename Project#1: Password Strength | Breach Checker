import hashlib
import requests
import re

def check_strength(password):
    # Very basic strength check
    length = len(password) >= 8
    digit = re.search(r"\d", password)
    upper = re.search(r"[A-Z]", password)
    lower = re.search(r"[a-z]", password)
    symbol = re.search(r"[!@#$%^&*()_+]", password)

    if all([length, digit, upper, lower, symbol]):
        return "Strong"
    elif length and (digit or symbol):
        return "Moderate"
    else:
        return "Weak"

def check_pwned(password):
    sha1 = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    prefix = sha1[:5]
    suffix = sha1[5:]

    url = f"https://api.pwnedpasswords.com/range/{prefix}"
    res = requests.get(url)
    if res.status_code != 200:
        raise RuntimeError("Error fetching data from API.")

    hashes = (line.split(":") for line in res.text.splitlines())
    for h, count in hashes:
        if h == suffix:
            return int(count)
    return 0

# ----------- Run Example ------------
if __name__ == "__main__":
    pwd = input("Enter a password to check: ")
    
    strength = check_strength(pwd)
    breaches = check_pwned(pwd)
    
    print(f"\nPassword Strength: {strength}")
    if breaches:
        print(f"⚠️ This password has been found in {breaches} breaches. Do NOT use it.")
    else:
        print("✅ This password was not found in known breaches.")
